# aegis-daemon/config.py

# --- Daemon Settings ---
# The time in seconds the daemon waits before starting a new processing cycle.
CYCLE_INTERVAL_SECONDS = 10

# --- Database Settings ---
# Use the format: "postgresql://user:password@host:port/database"
DATABASE_URL = "postgresql://postgres:postgres@localhost:5432/aegis"

# --- Blockchain Settings ---
# IMPORTANT: Use environment variables for sensitive data in production.
# The base URL for the Blockfrost API.
# Preview Testnet: https://cardano-preview.blockfrost.io/api
# Pre-Production Testnet: https://cardano-preprod.blockfrost.io/api
# Mainnet: https://cardano-mainnet.blockfrost.io/api
CARDANO_NETWORK = "preview"
CARDANO_BASE_URL = "https://cardano-preview.blockfrost.io/api"
BLOCKFROST_PROJECT_ID = "previewFXX4wEluOaqmPbMQSe57LVsXoRXb0koP"

# --- Wallet File Paths ---
# Store these securely. They grant control over your funds.
# These files are generated by the cardano-cli or the generate_wallet.py script.
WALLET_SKEY_PATH = "src/services/aegis/wallet/payment.skey"
WALLET_VKEY_PATH = "src/services/aegis/wallet/payment.vkey"


# --- State-Based Anomaly Rules ---

# Rules for assets in a stationary state (e.g., IN_VAULT, IN_VIEWING)
STATIONARY_ANOMALY_RULES = {
    "WEIGHT_PLATE": {"max_delta_percent": 0.5},
    "ENVIRONMENTAL": {
        "temp_range_celsius": (18.0, 22.0),
        "humidity_range_percent": (40.0, 50.0),
    },
}

# Rules for assets in a transient state (e.g., IN_TRANSIT_OUT, IN_TRANSIT_IN)
TRANSIT_ANOMALY_RULES = {"max_duration_minutes": 1}


# --- Event-Triggered State Change Rules (The "Happy Path") ---
# Defines the exact sequence of events required to trigger a valid state change.
# Format: { current_asset_status: { new_state_type: [(event_type, location_detail)] } }
EVENT_SEQUENCE_RULES = {
    "IN_VAULT": {
        "VAULT_EXIT": [("scan_exit", "VAULT"), ("auth_success", "TRANSFER_ZONE")]
    },
    "IN_TRANSIT_OUT": {
        "CUSTODY_TRANSFER": [
            ("scan_entry", "ANTECHAMBER"),
            ("custody_scan", "ANTECHAMBER"),
        ]
    },
    "IN_VIEWING": {
        "CUSTODY_TRANSFER": [
            ("scan_exit", "ANTECHAMBER"),
            ("auth_success", "TRANSFER_ZONE"),
        ]
    },
    "IN_TRANSIT_IN": {"VAULT_RETURN": [("scan_entry", "VAULT")]},
}

# Mapping of new state changes to the asset's next status in the `assets` table.
NEXT_ASSET_STATUS_MAP = {
    "VAULT_EXIT": "IN_TRANSIT_OUT",
    "CUSTODY_TRANSFER": "IN_VIEWING",  # This might need adjustment based on direction
    "VAULT_RETURN": "IN_VAULT",
    "SECURITY_BREACH": "FLAGGED_ANOMALY",
    "ENVIRONMENTAL_BREACH": "FLAGGED_ANOMALY",
}
